# auto-generated by grc.converter

id: isdbt_symbol_demapper
label: Symbol Demapper
category: ISDBT

parameters:
-   id: mode
    label: Transmission Mode
    dtype: enum
    default: '3'
    options: ['1', '2', '3']
    option_labels: [MODE1(2K), MODE2(4K), MODE3(8K)]
-   id: segments_A
    label: Layer A Segments
    dtype: int
-   id: constellation_size_A
    label: Layer A Modulation Scheme
    dtype: enum
    default: '4'
    options: ['4', '16', '64']
    option_labels: [QPSK, 16QAM, 64QAM]
-   id: segments_B
    label: Layer B Segments
    dtype: int
-   id: constellation_size_B
    label: Layer B Modulation Scheme
    dtype: enum
    default: '64'
    options: ['4', '16', '64']
    option_labels: [QPSK, 16QAM, 64QAM]
-   id: segments_C
    label: Layer C Segments
    dtype: int
-   id: constellation_size_C
    label: Layer C Modulation Scheme
    dtype: enum
    default: '64'
    options: ['4', '16', '64']
    option_labels: [QPSK, 16QAM, 64QAM]

inputs:
-   domain: stream
    dtype: complex
    vlen: ${ 13*96*(2**(int(mode)-1)) }

outputs:
-   label: out A
    domain: stream
    dtype: byte
    vlen: ${ (segments_A)*96*(2**(int(mode)-1)) }
-   label: out B
    domain: stream
    dtype: byte
    vlen: ${ (segments_B)*96*(2**(int(mode)-1)) }
    optional: true
-   label: out C
    domain: stream
    dtype: byte
    vlen: ${ (segments_C)*96*(2**(int(mode)-1)) }
    optional: true
asserts:
- ${ segments_A + segments_B + segments_C == 13 }
- ${ segments_A > -1 }
- ${ segments_B > -1 }
- ${ segments_C > -1 }

templates:
    imports: import isdbt
    make: isdbt.symbol_demapper(${mode}, ${segments_A}, ${constellation_size_A}, ${segments_B},
        ${constellation_size_B}, ${segments_C}, ${constellation_size_C})

file_format: 1
