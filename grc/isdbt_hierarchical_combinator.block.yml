# auto-generated by grc.converter

id: isdbt_hierarchical_combinator
label: Hierarchical Combinator
category: '[ISDBT]'

parameters:
-   id: mode
    label: Transmission Mode
    dtype: enum
    default: '3'
    options: ['1', '2', '3']
    option_labels: [MODE1(2K), MODE2(4K), MODE3(8K)]
-   id: segments_A
    label: Layer A Segments
    dtype: int
-   id: segments_B
    label: Layer B Segments
    dtype: int
-   id: segments_C
    label: Layer C Segments
    dtype: int

inputs:
-   label: in A
    domain: stream
    dtype: complex
    vlen: ${ (segments_A)*96*(2**(int(mode)-1)) }
-   label: in B
    domain: stream
    dtype: complex
    vlen: ${ (segments_B)*96*(2**(int(mode)-1)) }
    optional: true
-   label: in C
    domain: stream
    dtype: complex
    vlen: ${ (segments_C)*96*(2**(int(mode)-1)) }
    optional: true

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ 13*96*(2**(int(mode)-1)) }
asserts:
- ${ segments_A + segments_B + segments_C == 13 }
- ${ segments_A > -1 }
- ${ segments_B > -1 }
- ${ segments_C > -1 }

templates:
    imports: import isdbt
    make: isdbt.hierarchical_combinator(${mode}, ${segments_A}, ${segments_B}, ${segments_C})

file_format: 1
